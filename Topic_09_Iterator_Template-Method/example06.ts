interface FinancialData {
    revenue: number;
    expenses: number;
    period: string;
    transactions: Transaction[];
}

interface Transaction {
    date: string;
    amount: number;
    description: string;
}

class ReportGenerator {
    protected data: FinancialData;

    constructor() {
        this.data = {
            revenue: 150000,
            expenses: 85000,
            period: "2024-Q1",
            transactions: [
                { date: "2024-01-15", amount: 45000, description: "–ü—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ç—É –ê" },
                { date: "2024-02-01", amount: -30000, description: "–û–ø–ª–∞—Ç–∞ –æ—Ä–µ–Ω–¥–∏" },
                { date: "2024-02-15", amount: 65000, description: "–ü—Ä–æ–¥–∞–∂ –ø—Ä–æ–¥—É–∫—Ç—É B" },
                { date: "2024-03-01", amount: -25000, description: "–ó–∞—Ä–ø–ª–∞—Ç–∏" }
            ]
        };
    }

    generate(): void {
        this.prepareData();
        this.renderHeader();
        this.renderBody();
        this.renderFooter();
        this.save();
    }

    protected prepareData(): void {
        console.log("[INFO] –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞ –ø–µ—Ä—ñ–æ–¥ " + this.data.period);
        this.calculateMetrics();
    }

    private calculateMetrics(): void {
        const profit = this.data.revenue - this.data.expenses;
        const profitMargin = (profit / this.data.revenue) * 100;
    }

    protected renderHeader(): void {
        console.log("\n=== –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç –∑–∞ " + this.data.period + " ===");
        console.log(`–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: ${this.data.revenue} –≥—Ä–Ω`);
        console.log(`–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: ${this.data.expenses} –≥—Ä–Ω`);
    }

    protected renderBody(): void {
        console.log("\n–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:");
        this.data.transactions.forEach(transaction => {
            const type = transaction.amount > 0 ? "üìà" : "üìâ";
            console.log(`${type} ${transaction.date}: ${transaction.description} - ${Math.abs(transaction.amount)} –≥—Ä–Ω`);
        });
    }

    protected renderFooter(): void {
        const balance = this.data.transactions.reduce((sum, t) => sum + t.amount, 0);
        console.log("\n–ü—ñ–¥—Å—É–º–æ–∫");
        console.log(`–ë–∞–ª–∞–Ω—Å –∑–∞ –ø–µ—Ä—ñ–æ–¥: ${balance} –≥—Ä–Ω`);
        console.log("–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: " + new Date().toLocaleString());
        console.log("\n==============================");
    }

    protected save(): void {
        console.log("\n[INFO] –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ");
    }
}

const report = new ReportGenerator();
report.generate();

