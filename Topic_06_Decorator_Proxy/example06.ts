function LogMethod<This, Args extends any[], Return>(
    originalMethod: (this: This, ...args: Args) => Return, // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>
): (this: This, ...args: Args) => Return { // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–æ–≥–æ –∂ —Ç–∏–ø—É

    const methodName = String(context.name); // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–µ—Ç–æ–¥—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é-–æ–±–≥–æ—Ä—Ç–∫—É. –°–∞–º–µ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–º—ñ–Ω–∏—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥.
    function loggedWrapper(this: This, ...args: Args): Return {
        // --- –õ–æ–≥—ñ–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É ---
        console.log(`üîç –í–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É ${methodName} –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:`, args);
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç 'this' —Ç–∞ –ø–µ—Ä–µ–¥–∞—é—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        return originalMethod.apply(this, args);
        // --- –ö—ñ–Ω–µ—Ü—å –ª–æ–≥—ñ–∫–∏ ---
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é-–æ–±–≥–æ—Ä—Ç–∫—É.
    // TypeScript –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É –Ω–∞ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é.
    return loggedWrapper;
}

class Calculator {
    @LogMethod
    add(a: number, b: number): number {
        return a + b;
    }
}

const calc = new Calculator();
calc.add(2, 3);
