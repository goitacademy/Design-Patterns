// –£–í–ê–ì–ê! –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (parameter decorators) –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —É —Å—É—á–∞—Å–Ω–æ–º—É TypeScript (5.x+) —ñ —Ü–µ–π –∫–æ–¥ –Ω–µ —Å–∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è.
// –¶–µ –ª–∏—à–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.
// –Ø–∫—â–æ —Å–ø—Ä–æ–±—É—î—Ç–µ —Å–∫–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏ ‚Äî –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–º–∏–ª–∫—É "Decorators are not valid here".

import "reflect-metadata";

const PARAM_METADATA_KEY = Symbol("log_params");

function LogParam(
  target: Object,
  propertyKey: string | symbol,
  parameterIndex: number
): void {
  const existingParams: number[] =
    Reflect.getOwnMetadata(PARAM_METADATA_KEY, target, propertyKey) ?? [];
  Reflect.defineMetadata(
    PARAM_METADATA_KEY,
    [...existingParams, parameterIndex],
    target,
    propertyKey
  );
}

class ExampleService {
  test(@LogParam userId: string, @LogParam role: string): void {
    const indices =
      Reflect.getOwnMetadata(PARAM_METADATA_KEY, this, "test") ?? [];
    for (const i of indices) {
      console.log(`üìå –ü–∞—Ä–∞–º–µ—Ç—Ä #${i}:`, arguments[i]);
    }
  }
}

const svc = new ExampleService();
svc.test("abc123", "admin");
