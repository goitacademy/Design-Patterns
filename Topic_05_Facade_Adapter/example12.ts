// mediaFacade.ts ‚Äî –º–æ–¥—É–ª—å, —â–æ –≤–∏—Å—Ç—É–ø–∞—î —è–∫ —Ñ–∞—Å–∞–¥

class AudioEngine {
    initialize(): void {
        console.log("üîà –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—É–¥—ñ–æ-–¥–≤–∏–∂–∫–∞");
    }

    playSound(file: string): void {
        console.log(`üéµ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ: ${file}`);
    }
}

class VideoEngine {
    initialize(): void {
        console.log("üì∫ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ-–¥–≤–∏–∂–∫–∞");
    }

    playVideo(file: string): void {
        console.log(`üé¨ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: ${file}`);
    }
}

class SubtitlesEngine {
    load(file: string): void {
        console.log(`üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤: ${file}`);
    }
}

// –¶–µ–π –æ–±'—î–∫—Ç ‚Äî —Ñ–∞—Å–∞–¥ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–¥—É–ª—è
class MediaPlayerFacade {
    private audio = new AudioEngine();
    private video = new VideoEngine();
    private subtitles = new SubtitlesEngine();

    playMedia(videoPath: string, audioPath: string, subtitlesPath?: string): void {
        this.audio.initialize();
        this.video.initialize();

        this.audio.playSound(audioPath);
        this.video.playVideo(videoPath);

        if (subtitlesPath) {
            this.subtitles.load(subtitlesPath);
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ª–∏—à–µ —Ñ–∞—Å–∞–¥
export const mediaPlayer = new MediaPlayerFacade();